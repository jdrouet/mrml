stages:
  - lint
  - test
  - bench

lint-clippy:
  stage: lint
  image: jdrouet/clippy:latest
  script:
    - cargo clippy -- -D warnings -A clippy::upper-case-acronyms

lint-check:
  stage: lint
  image: rust:latest
  before_script:
    - cargo install cargo-hack
  script:
    - cargo hack check --feature-powerset --no-dev-deps

lint-rustfmt:
  stage: lint
  image: rust:latest
  before_script:
    - rustup component add rustfmt
  script:
    - rustfmt --check packages/mrml-core/src/{**/,}*.rs
    - rustfmt --check packages/mrml-cli/src/*.rs
    - make -C packages/mrml-wasm format

lint-typings:
  stage: lint
  image: node:latest
  script:
    - cd packages/mrml-typings
    - npm install
    - npm run lint
    - npm test

test-bench:
  stage: test
  image: rust:latest
  script:
    - cargo bench
    - curl -o codebench-cli https://app.codebench.cloud/static/bin/codebench-cli-amd64
    - chmod +x codebench-cli
    - ./codebench-cli --token $CODEBENCH_TOKEN target/criterion

test-coverage:
  stage: test
  image: xd009642/tarpaulin:develop-nightly
  script:
    - make -C packages/mrml-core coverage

test-wasm:
  stage: test
  image: jdrouet/wasm-pack
  script:
    - make -C packages/mrml-wasm requirements
    - make -C packages/mrml-wasm test

bench-mrml:
  stage: bench
  # contains node and rust
  image: jdrouet/wasm-pack
  only:
    - main
  before_script:
    - npm install -g mjml
    - cargo install hyperfine
  script:
    - cargo build --package mrml-cli --release
    - hyperfine --export-json hyperfine.json --runs 1000 "target/release/mrml resources/template/amario.mjml render" "mjml resources/template/amario.mjml"
    - curl -o codebench-cli https://app.codebench.cloud/static/bin/codebench-cli-amd64
    - chmod +x codebench-cli
    - ./codebench-cli --token $CODEBENCH_TOKEN hyperfine.json
